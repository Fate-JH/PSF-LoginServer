// Copyright (c) 2025 PSForever
package net.psforever.actors.session.support

import net.psforever.actors.session.AvatarActor
import net.psforever.objects.{PlanetSideGameObject, Player, Vehicle}
import net.psforever.objects.vital.Vitality
import net.psforever.packet.PlanetSidePacket
import net.psforever.packet.game.PlanetsideAttributeMessage
import net.psforever.services.avatar.{AvatarAction, AvatarServiceMessage}
import net.psforever.services.vehicle.{VehicleAction, VehicleServiceMessage}
import net.psforever.types.PlanetSideGUID

trait VulnerabilityFlag {
  def state: Boolean
  def expiration: Long
}

final case class Invulnerable(expiration: Long) extends VulnerabilityFlag {
  val state: Boolean = true
}

case object SpecialInvulnerability extends VulnerabilityFlag {
  val state: Boolean = true
  val expiration: Long = Long.MaxValue
}

case object Vulnerable extends VulnerabilityFlag {
  val state: Boolean = false
  val expiration: Long = Long.MaxValue
}

object Vulnerability {
  private[session] def topOffHealthOfInvulnerable(data: SessionData, objs: PlanetSideGameObject with Vitality *): Unit = {
    if (data.general.invulnerability.exists(_.state)) {
      if (data.general.invulnerability.map(_.expiration).getOrElse(Long.MaxValue) > System.currentTimeMillis()) {
        objs.foreach { obj =>
          topOffHealthOf(data, obj)
        }
      } else {
        data.general.invulnerability = Some(Vulnerable)
      }
    }
  }

  private[session] def topOffHealthOfInvulnerablePlayer(data: SessionData, obj: Player): Unit = {
    if (data.general.invulnerability.exists(_.state)) {
      if (data.general.invulnerability.map(_.expiration).getOrElse(Long.MaxValue) > System.currentTimeMillis()) {
        topOffHealthOfPlayer(data, obj)
      } else {
        data.general.invulnerability = Some(Vulnerable)
      }
    }
  }

  private def topOffHealthOf(data: SessionData, obj: PlanetSideGameObject with Vitality): Unit = {
    obj match {
      case p: Player => topOffHealthOfPlayer(data, p)
      case v: Vehicle => topOffHealthOfVehicle(data, v)
      case o: PlanetSideGameObject with Vitality => topOffHealthOfGeneric(data, o)
      case _ => ()
    }
  }

  private def topOffHealthOfPlayer(data: SessionData, player: Player): Unit = {
    val avatarGuid = player.GUID
    val continent = data.continent
    val continentId = continent.id
    val avatarEvents = continent.AvatarEvents
    val sendResponse: PlanetSidePacket => Unit = data.sendResponse
    //below full health, full health
    val maxHealth = player.MaxHealth.toLong
    if (player.Health < maxHealth) {
      player.Health = maxHealth.toInt
      player.LogActivity(player.ClearHistory().head)
      sendResponse(PlanetsideAttributeMessage(avatarGuid, 0, maxHealth))
      avatarEvents ! AvatarServiceMessage(continentId, AvatarAction.PlanetsideAttribute(avatarGuid, 0, maxHealth))
    }
    //below full stamina, full stamina
    val avatar = player.avatar
    val maxStamina = avatar.maxStamina
    if (avatar.stamina < maxStamina) {
      player.Actor ! AvatarActor.RestoreStamina(maxStamina)
      sendResponse(PlanetsideAttributeMessage(avatarGuid, 2, maxStamina.toLong))
    }
    //below full armor, full armor
    val maxArmor = player.MaxArmor.toLong
    if (player.Armor < maxArmor) {
      player.Armor = maxArmor.toInt
      sendResponse(PlanetsideAttributeMessage(avatarGuid, 4, maxArmor))
      avatarEvents ! AvatarServiceMessage(continentId, AvatarAction.PlanetsideAttribute(avatarGuid, 4, maxArmor))
    }
  }

  private def topOffHealthOfVehicle(data: SessionData, vehicle: Vehicle): Unit = {
    topOffHealthOfPlayer(data, data.player)
    topOffHealthOfGeneric(data, vehicle)
    //vehicle shields below half, full shields
    val maxShieldsOfVehicle = vehicle.MaxShields.toLong
    val shieldsUi = vehicle.Definition.shieldUiAttribute
    if (vehicle.Shields < maxShieldsOfVehicle * 0.5f) {
      val guid = vehicle.GUID
      vehicle.Shields = maxShieldsOfVehicle.toInt
      data.sendResponse(PlanetsideAttributeMessage(guid, shieldsUi, maxShieldsOfVehicle))
      data.continent.VehicleEvents ! VehicleServiceMessage(
        data.continent.id,
        VehicleAction.PlanetsideAttribute(PlanetSideGUID(0), guid, shieldsUi, maxShieldsOfVehicle)
      )
    }
  }

  private def topOffHealthOfGeneric(data: SessionData, obj: PlanetSideGameObject with Vitality): Unit = {
    //below full health, full heal
    val guid = obj.GUID
    val maxHealthOf = obj.MaxHealth.toLong
    if (obj.Health < maxHealthOf) {
      obj.Health = maxHealthOf.toInt
      data.sendResponse(PlanetsideAttributeMessage(guid, 0, maxHealthOf))
      data.continent.VehicleEvents ! VehicleServiceMessage(
        data.continent.id,
        VehicleAction.PlanetsideAttribute(PlanetSideGUID(0), guid, 0, maxHealthOf)
      )
    }
  }
}
